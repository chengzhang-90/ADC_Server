/******************************************************************
 * 交易名称: 梅泰诺签到
 * 生成日期: 2015-4-21 15:37:32
 * 作    者: zhouhd
 ******************************************************************/
#include <string.h>
#include <stdlib.h>
#include "adc_syserr.h"
#include "udo.h"
#include "log.h"
#include "adc_syserr.h"
#include "pub_base.h"
#include "dic_public.h"
#include "dic_account.h"
#include "common.h"
#include "adc_global.h"	 
#include "apyfunc.h"
	 
 
EXEC SQL INCLUDE SQLCA;
EXEC SQL include "svc_struct.h";



#define CHECK_HAVE_ALL_FIELD( aczTranCode, pstInList, pstOutList )\
{\
    int nTmpVar = 0;\
    int FIELD_ID_LIST[] =\
    {\
        PROCESSCODE,\
        MERCHANTID,\
        TERMID,\
        TXDATE,\
        TXTIME,\
        OPERID,\
        CHANNELID,\
        CHDATE,\
        CHTIME,\
        CHTXCODE,\
        CHSERIAL,\
        SYSDATE,\
        TERMINFO,\
    };\
    for( nTmpVar = 0; nTmpVar < sizeof(FIELD_ID_LIST)/sizeof(int); nTmpVar++ )\
    {\
        if( !UDO_FieldExist( pstInList, FIELD_ID_LIST[nTmpVar] ) )\
        {\
            char aczRetCode[30], aczRetMessage[40];\
            sprintf( aczRetCode, "%s%03d", aczTranCode, NO_REQUIRED_FIELD );\
            sprintf( aczRetMessage, "缺少要求的字段 %d", FIELD_ID_LIST[nTmpVar] );\
            LOG4C(( LOG_WARN, "%s", aczRetMessage ));\
            UDO_AddField( pstOutList, RESPONSE, UDT_STRING, aczRetCode, 9 );\
            UDO_AddField( pstOutList, RETMSG, UDT_STRING, aczRetMessage,strlen(aczRetMessage) );\
            return -1;\
        }\
    }\
}

int adc_211013_main(UDP epstInList, UDP opstOutList)
{
    int nRet=0,nLen=0;
    EXEC SQL BEGIN DECLARE SECTION;
    char    I_ProcessCode[6+1];                 /* 处理码 */
    char    I_MerchantId[15+1];                 /* 商户号 */
    char    I_TermId[8+1];                      /* 终端号 */
    char    I_TxDate[8+1];                      /* 平台账务日期 */
    char    I_TxTime[6+1];                      /* 交易时间 */
    char    I_OperId[12+1];                     /* 操作员号 */
    char    I_Channelid[3+1];                   /* 渠道号 */
    char    I_ChDate[8+1];                      /* 渠道日期 */
    char    I_ChTime[6+1];                      /* 渠道时间 */
    char    I_ChTxCode[6+1];                    /* 渠道处理码 */
    char    I_ChSerial[6+1];                    /* 渠道流水 */
    char    I_SysDate[8+1];                     /* 系统日期 */
    char    I_TermInfo[50+1];                   /* 终端信息 */
    char    O_Response[10+1];                   /* 响应代码 */
    char    O_RetMsg[64+1];                     /* 响应信息 */
    char    O_MacKey[20+1];                     /* MACKEY */
    char    O_PinKey[20+1];                     /* PINKEY */
    char    O_MacCheck[4+1];                    /* MAC校验位 */
    char    O_PinCheck[4+1];                    /* PIN校验位 */
    char    O_BatchNo[8+1];                     /* 批次号 */
    char    O_ChSerial[6+1];                    /* 渠道流水 */
    char    O_PinkeyMackey[80+1];               /* 存放下发的密钥信息 */
    char    O_HoDate[8+1];                      /* 主机日期 */
    char    O_HoTime[6+1];                      /* 主机时间 */
    char    O_MerchantName[100+1];              /* 商户名称 */
    char    O_MerchatParm[255+1];               /* 参数信息 */
    char    O_ParmVersion[20+1];                /* 参数版本号 */
    char    O_TransCtrol[50+1];                 /* 终端控制位 */
	T_SVC_Miteno_Terminal	  stTerm;
    EXEC SQL END DECLARE SECTION;
    /*请在此添加EC变量*/
	int 	i=0;
	char	 aczMasterKey[17];
	char	 aczKey[17];
	char	 aczTmp[17];
	char	 aczCheck[17];
	ST_TERM_LOGIN_REQ stReq;
	ST_TERM_LOGIN_RSP stRsp;


    CHECK_HAVE_ALL_FIELD( "adc_211013", epstInList, opstOutList )


    memset( I_ProcessCode, 0, sizeof(I_ProcessCode) );
    memset( I_MerchantId, 0, sizeof(I_MerchantId) );
    memset( I_TermId, 0, sizeof(I_TermId) );
    memset( I_TxDate, 0, sizeof(I_TxDate) );
    memset( I_TxTime, 0, sizeof(I_TxTime) );
    memset( I_OperId, 0, sizeof(I_OperId) );
    memset( I_Channelid, 0, sizeof(I_Channelid) );
    memset( I_ChDate, 0, sizeof(I_ChDate) );
    memset( I_ChTime, 0, sizeof(I_ChTime) );
    memset( I_ChTxCode, 0, sizeof(I_ChTxCode) );
    memset( I_ChSerial, 0, sizeof(I_ChSerial) );
    memset( I_SysDate, 0, sizeof(I_SysDate) );
    memset( I_TermInfo, 0, sizeof(I_TermInfo) );
    memset( O_Response, 0, sizeof(O_Response) );
    memset( O_RetMsg, 0, sizeof(O_RetMsg) );
    memset( O_MacKey, 0, sizeof(O_MacKey) );
    memset( O_PinKey, 0, sizeof(O_PinKey) );
    memset( O_MacCheck, 0, sizeof(O_MacCheck) );
    memset( O_PinCheck, 0, sizeof(O_PinCheck) );
    memset( O_BatchNo, 0, sizeof(O_BatchNo) );
    memset( O_ChSerial, 0, sizeof(O_ChSerial) );
    memset( O_PinkeyMackey, 0, sizeof(O_PinkeyMackey) );
    memset( O_HoDate, 0, sizeof(O_HoDate) );
    memset( O_HoTime, 0, sizeof(O_HoTime) );
    memset( O_MerchantName, 0, sizeof(O_MerchantName) );
    memset( O_MerchatParm, 0, sizeof(O_MerchatParm) );
    memset( O_ParmVersion, 0, sizeof(O_ParmVersion) );
    memset( O_TransCtrol, 0, sizeof(O_TransCtrol) );

    /*取域<1-处理码>的值*/
    UDO_GetField( epstInList, PROCESSCODE, 0, I_ProcessCode, &nLen );

    /*取域<4-商户号>的值*/
    UDO_GetField( epstInList, MERCHANTID, 0, I_MerchantId, &nLen );

    /*取域<5-终端号>的值*/
    UDO_GetField( epstInList, TERMID, 0, I_TermId, &nLen );

    /*取域<12-平台账务日期>的值*/
    UDO_GetField( epstInList, TXDATE, 0, I_TxDate, &nLen );

    /*取域<13-交易时间>的值*/
    UDO_GetField( epstInList, TXTIME, 0, I_TxTime, &nLen );

    /*取域<14-操作员号>的值*/
    UDO_GetField( epstInList, OPERID, 0, I_OperId, &nLen );

    /*取域<17-渠道号>的值*/
    UDO_GetField( epstInList, CHANNELID, 0, I_Channelid, &nLen );

    /*取域<26-渠道日期>的值*/
    UDO_GetField( epstInList, CHDATE, 0, I_ChDate, &nLen );

    /*取域<27-渠道时间>的值*/
    UDO_GetField( epstInList, CHTIME, 0, I_ChTime, &nLen );

    /*取域<32-渠道处理码>的值*/
    UDO_GetField( epstInList, CHTXCODE, 0, I_ChTxCode, &nLen );

    /*取域<33-渠道流水>的值*/
    UDO_GetField( epstInList, CHSERIAL, 0, I_ChSerial, &nLen );

    /*取域<54-系统日期>的值*/
    UDO_GetField( epstInList, SYSDATE, 0, I_SysDate, &nLen );

    /*取域<82-终端信息>的值*/    
	UDO_GetField( epstInList, TERMINFO, 0, I_TermInfo, &nLen );

    /*
     * TODO: 在此添加绘制代码
     */
	PUB_StrTrim( I_TermId, ' ' );
	PUB_StrTrim( I_MerchantId, ' ' );


	
	memset((char *)&stReq, 0, sizeof(stReq));
	memset((char *)&stRsp, 0, sizeof(stRsp));

	strcpy(stReq.szTransCode, I_ProcessCode);
	strcpy(stReq.szMerchantID, I_MerchantId);
	strcpy(stReq.szTermID, I_TermId);
	strcpy(stReq.szDate, I_ChDate);
	strcpy(stReq.szTime, I_ChTime);
	strcpy(stReq.szTrace, I_ChSerial);
	
	
	nRet=UpdateAndInsertMitenoTerm(&stReq, &stRsp, &stTerm, O_RetMsg);
	
	if(nRet != 0)
	{
	   strcpy( O_Response, "211013001" );
	   strcpy( O_RetMsg, "系统故障" );
	   goto ErrorOut;
	}
	
	if(stRsp.nResp != 0)
	{
	  strcpy( O_Response, "211013002" );
	  strncpy(O_RetMsg, stRsp.szRespInfo, 40);
	  goto ErrorOut;
	}


	PUB_StrTrim( stTerm.m_sMainKey , ' ' );
	if( strlen( stTerm.m_sMainKey ) == 0 )
	{
	
		memcpy( stTerm.m_sMainKey, "C6E9F31E0F891CE7520CD8F28BF0028B", 32 );
	}
	
	sprintf( stTerm.m_sLoginTime, "%8.8s%6.6s", I_SysDate, I_TxTime );
	
	DecryptKey( aczMasterKey,	stTerm.m_sMainKey );
	DecryptKey( aczMasterKey + 8, stTerm.m_sMainKey + 16 );
	
	/*********************************PIN********************************************/
	srandom((int)time(NULL));
	for( i=0; ; )
	{
	   aczKey[i] = random()%256;
	   if( aczKey[i] == 0x00 )
		   continue;
	   i++;
	   if( i==16)
		   break;
	}
	
	memset(aczTmp, 0, sizeof(aczTmp));
	mydes3( aczTmp, aczCheck, aczKey, 0 );		/*计算校验位*/
	memcpy( O_PinCheck, aczCheck, 4 );

	
	EncryptKey( stTerm.m_sPinKey, aczKey );
	EncryptKey( stTerm.m_sPinKey+16, aczKey+8 );
	
	mydes3( aczKey, O_PinKey, aczMasterKey, 0 );	/*用主密钥进行加密*/
	mydes3( aczKey+8, O_PinKey+8, aczMasterKey, 0 );	/*用主密钥进行加密*/
	
	
	/*********************************MAC********************************************/
	for( i=0; ; )
	{
	   aczKey[i] = random()%256;
	   if( aczKey[i] == 0x00 )
		   continue;
	   i++;
	   if( i==16)
		   break;
	}
	memset(aczTmp, 0, sizeof(aczTmp));
	mydes3( aczTmp, aczCheck, aczKey, 0 );		/*计算校验位*/
	
	memcpy( O_MacCheck, aczCheck, 4 );
	
	EncryptKey( stTerm.m_sMacKey, aczKey );
	EncryptKey( stTerm.m_sMacKey+16, aczKey+8 );
	
	mydes3( aczKey, O_MacKey, aczMasterKey, 0 );	/*用主密钥进行加密*/
	mydes3( aczKey+8, O_MacKey+8, aczMasterKey, 0 );	/*用主密钥进行加密*/


	
	TOOL_ConvertBCD2Ascii( O_PinKey, 32, O_PinkeyMackey );
	TOOL_ConvertBCD2Ascii( O_PinCheck, 8, O_PinkeyMackey+32 );
	TOOL_ConvertBCD2Ascii( O_MacKey, 32,  O_PinkeyMackey+40);
	TOOL_ConvertBCD2Ascii( O_MacCheck, 8, O_PinkeyMackey+72 );

 	
	/*****************************BATCH TRACE******************************************/
	
	PUB_StrTrim( stTerm.m_sBatchNo, ' ' );
	if( strlen( stTerm.m_sBatchNo ) == 0 )
	{
		strcpy( stTerm.m_sBatchNo, "000001" );
	}
	memcpy( O_BatchNo, stTerm.m_sBatchNo, 6 );
	
	PUB_StrTrim( stTerm.m_sPosTrace, ' ' );
	if( strlen( stTerm.m_sPosTrace ) == 0 )
	{
		strcpy( stTerm.m_sPosTrace, "000001" );
	}
	memcpy( O_ChSerial, stTerm.m_sPosTrace, 6 );
	/********************************************************************************/
	
	/*更新密钥*/
	EXEC SQL UPDATE Svc_Miteno_Terminal SET MainKey=:stTerm.m_sMainKey, macKey = :stTerm.m_sMacKey, pinKey=:stTerm.m_sPinKey, 
		 login_flag='1', login_Time = :stTerm.m_sLoginTime, Batchno=:stTerm.m_sBatchNo, PosTrace=:stTerm.m_sPosTrace,
		 UmsMainKey=:stTerm.m_sMainKey, UmsPinKey=:stTerm.m_sPinKey, UmsMacKey=:stTerm.m_sMacKey   
				 WHERE code=:I_TermId and merchant_code=:I_MerchantId;
	if ( SQLCODE )
	{ 
		LOG4C(( LOG_FATAL, "工作密钥更新失败 SQLCODE=[%d][%s][%s]", SQLCODE, I_TermId, I_MerchantId));
		strcpy( O_Response, "211013003" );
		strcpy( O_RetMsg, "工作密钥更新失败" );
		EXEC SQL ROLLBACK WORK;
		goto ErrorOut;
	}
	
	EXEC SQL COMMIT WORK;
	strcpy(O_MerchantName, stTerm.m_sShortName);
	
	strcpy(O_TransCtrol, stRsp.szParm);	
	strcpy( O_Response, "000000000" );
	strcpy( O_RetMsg, "交易成功" );

ErrorOut:

    /*给域<2-响应代码>赋值*/
    UDO_AddField( opstOutList, RESPONSE, UDT_STRING, O_Response, strlen(O_Response) );

    /*给域<3-响应信息>赋值*/
    UDO_AddField( opstOutList, RETMSG, UDT_STRING, O_RetMsg, strlen(O_RetMsg) );

    /*给域<8-MACKEY>赋值*/
    UDO_AddField( opstOutList, MACKEY, UDT_BIN, O_MacKey, strlen(O_MacKey) );

    /*给域<9-PINKEY>赋值*/
    UDO_AddField( opstOutList, PINKEY, UDT_BIN, O_PinKey, strlen(O_PinKey) );

    /*给域<10-MAC校验位>赋值*/
    UDO_AddField( opstOutList, MACCHECK, UDT_BIN, O_MacCheck, strlen(O_MacCheck) );

    /*给域<11-PIN校验位>赋值*/
    UDO_AddField( opstOutList, PINCHECK, UDT_BIN, O_PinCheck, strlen(O_PinCheck) );

    /*给域<16-批次号>赋值*/
    UDO_AddField( opstOutList, BATCHNO, UDT_STRING, O_BatchNo, strlen(O_BatchNo) );

    /*给域<33-渠道流水>赋值*/
    UDO_AddField( opstOutList, CHSERIAL, UDT_STRING, O_ChSerial, strlen(O_ChSerial) );

    /*给域<60-存放下发的密钥信息>赋值*/
    UDO_AddField( opstOutList, PINKEYMACKEY, UDT_STRING, O_PinkeyMackey, strlen(O_PinkeyMackey) );

    /*给域<72-主机日期>赋值*/
    UDO_AddField( opstOutList, HODATE, UDT_STRING, O_HoDate, strlen(O_HoDate) );

    /*给域<73-主机时间>赋值*/
    UDO_AddField( opstOutList, HOTIME, UDT_STRING, O_HoTime, strlen(O_HoTime) );

    /*给域<74-商户名称>赋值*/
    UDO_AddField( opstOutList, MERCHANTNAME, UDT_BIN, O_MerchantName, strlen(O_MerchantName) );

    /*给域<75-参数信息>赋值*/
    UDO_AddField( opstOutList, MERCHATPARM, UDT_BIN, O_MerchatParm, strlen(O_MerchatParm) );

    /*给域<76-参数版本号>赋值*/
    UDO_AddField( opstOutList, PARMVERSION, UDT_STRING, O_ParmVersion, strlen(O_ParmVersion) );
	
    /*给域<81-终端控制位>赋值*/    
	UDO_AddField( opstOutList, TRANSCTROL, UDT_STRING, O_TransCtrol, strlen(O_TransCtrol) );

    return 0;
}
