/******************************************************************
 * 交易名称: 冲正
 * 生成日期: 2015-4-11 23:18:22
 * 作    者: zhouhd
 ******************************************************************/

#include "udo.h"
#include "log.h"
#include "adc_syserr.h"
#include "pub_base.h"
#include "dic_public.h"
#include "dic_account.h"
#include "common.h"
#include "adc_global.h"
#include "svc_define.h"
#include "apyfunc.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL include "svc_struct.h";


#define CHECK_HAVE_ALL_FIELD( aczTranCode, pstInList, pstOutList )\
{\
    int nTmpVar = 0;\
    int FIELD_ID_LIST[] =\
    {\
        PROCESSCODE,\
        MERCHANTID,\
        TERMID,\
        TXDATE,\
        TXTIME,\
        OPERID,\
        SERIAL,\
        BATCHNO,\
        CHANNELID,\
        TXAMT,\
        CHDATE,\
        CHTIME,\
        CHTXCODE,\
        CHSERIAL,\
        OLDPROCESSCODE,\
        COUPONID,\
        OLDCHSERIAL,\
        OUTTRADENO,\
    };\
    for( nTmpVar = 0; nTmpVar < sizeof(FIELD_ID_LIST)/sizeof(int); nTmpVar++ )\
    {\
        if( !UDO_FieldExist( pstInList, FIELD_ID_LIST[nTmpVar] ) )\
        {\
            char aczRetCode[30], aczRetMessage[40];\
            sprintf( aczRetCode, "%s%03d", aczTranCode, NO_REQUIRED_FIELD );\
            sprintf( aczRetMessage, "缺少要求的字段 %d", FIELD_ID_LIST[nTmpVar] );\
            LOG4C(( LOG_WARN, "%s", aczRetMessage ));\
            UDO_AddField( pstOutList, RESPONSE, UDT_STRING, aczRetCode, 9 );\
            UDO_AddField( pstOutList, RETMSG, UDT_STRING, aczRetMessage,strlen(aczRetMessage) );\
            return -1;\
        }\
    }\
}

int adc_211011_main(UDP epstInList, UDP opstOutList)
{
    int nRet=0,nLen=0;
    EXEC SQL BEGIN DECLARE SECTION;
    char    I_ProcessCode[6+1];                 /* 处理码 */
    char    I_MerchantId[15+1];                 /* 商户号 */
    char    I_TermId[8+1];                      /* 终端号 */
    char    I_TxDate[8+1];                      /* 平台账务日期 */
    char    I_TxTime[6+1];                      /* 交易时间 */
    char    I_OperId[12+1];                     /* 操作员号 */
    char    I_Serial[12+1];                     /* 平台流水号 */
    char    I_BatchNo[8+1];                     /* 批次号 */
    char    I_Channelid[3+1];                   /* 渠道号 */
    char    I_TxAmt[12+1];                      /* 交易金额 */
    char    I_ChDate[8+1];                      /* 渠道日期 */
    char    I_ChTime[6+1];                      /* 渠道时间 */
    char    I_ChTxCode[6+1];                    /* 渠道处理码 */
    char    I_ChSerial[6+1];                    /* 渠道流水 */
    char    I_OldProcessCode[6+1];              /* 原渠道交易处理码 */
    char    I_couponid[50+1];                   /* 串码 */
    char    I_OldChSerial[6+1];                 /* 原渠道流水号 */
    char    I_outtradeno[50+1];                 /* 商户订单号 */
    char    O_Response[10+1];                   /* 响应代码 */
    char    O_RetMsg[64+1];                     /* 响应信息 */
    char    O_HoDate[8+1];                      /* 主机日期 */    
	char    O_HoTime[6+1];                      /* 主机时间 */
	char	O_RefNum[12+1]; 					/* 主机参考号 */
    T_SVC_Miteno_Terminal stTerm;
    char    aczCurPosTrace[7];
	EXEC SQL END DECLARE SECTION;
    /*请在此添加EC变量*/
	
	ST_WX_ORDER_REVERSAL_REQ stWxOrderReverSalreq;
	ST_WX_ORDER_REVERSAL_RSP stWxOrderReverSalrsp;

	
	ST_REVERSAL_COUPON_ACCEPT_REQ req;
	ST_REVERSAL_COUPON_ACCEPT_RSP rsp;

	ST_BAIDU_ORDER_REVERSAL_REQ stBaiduOrderReverSalreq;
	ST_BAIDU_ORDER_REVERSAL_RSP stBaiduOrderReverSalrsp;

	

    CHECK_HAVE_ALL_FIELD( "adc_211011", epstInList, opstOutList )


    memset( I_ProcessCode, 0, sizeof(I_ProcessCode) );
    memset( I_MerchantId, 0, sizeof(I_MerchantId) );
    memset( I_TermId, 0, sizeof(I_TermId) );
    memset( I_TxDate, 0, sizeof(I_TxDate) );
    memset( I_TxTime, 0, sizeof(I_TxTime) );
    memset( I_OperId, 0, sizeof(I_OperId) );
    memset( I_Serial, 0, sizeof(I_Serial) );
    memset( I_BatchNo, 0, sizeof(I_BatchNo) );
    memset( I_Channelid, 0, sizeof(I_Channelid) );
    memset( I_TxAmt, 0, sizeof(I_TxAmt) );
    memset( I_ChDate, 0, sizeof(I_ChDate) );
    memset( I_ChTime, 0, sizeof(I_ChTime) );
    memset( I_ChTxCode, 0, sizeof(I_ChTxCode) );
    memset( I_ChSerial, 0, sizeof(I_ChSerial) );
    memset( I_OldProcessCode, 0, sizeof(I_OldProcessCode) );
    memset( I_couponid, 0, sizeof(I_couponid) );
    memset( I_OldChSerial, 0, sizeof(I_OldChSerial) );
    memset( I_outtradeno, 0, sizeof(I_outtradeno) );
    memset( O_Response, 0, sizeof(O_Response) );
    memset( O_RetMsg, 0, sizeof(O_RetMsg) );
	memset( O_RefNum, 0, sizeof(O_RefNum) );    
	memset( O_HoDate, 0, sizeof(O_HoDate) );    
	memset( O_HoTime, 0, sizeof(O_HoTime) );

    /*取域<1-处理码>的值*/
    UDO_GetField( epstInList, PROCESSCODE, 0, I_ProcessCode, &nLen );

    /*取域<4-商户号>的值*/
    UDO_GetField( epstInList, MERCHANTID, 0, I_MerchantId, &nLen );

    /*取域<5-终端号>的值*/
    UDO_GetField( epstInList, TERMID, 0, I_TermId, &nLen );

    /*取域<12-平台账务日期>的值*/
    UDO_GetField( epstInList, TXDATE, 0, I_TxDate, &nLen );

    /*取域<13-交易时间>的值*/
    UDO_GetField( epstInList, TXTIME, 0, I_TxTime, &nLen );

    /*取域<14-操作员号>的值*/
    UDO_GetField( epstInList, OPERID, 0, I_OperId, &nLen );

    /*取域<15-平台流水号>的值*/
    UDO_GetField( epstInList, SERIAL, 0, I_Serial, &nLen );

    /*取域<16-批次号>的值*/
    UDO_GetField( epstInList, BATCHNO, 0, I_BatchNo, &nLen );

    /*取域<17-渠道号>的值*/
    UDO_GetField( epstInList, CHANNELID, 0, I_Channelid, &nLen );

    /*取域<24-交易金额>的值*/
    UDO_GetField( epstInList, TXAMT, 0, I_TxAmt, &nLen );

    /*取域<26-渠道日期>的值*/
    UDO_GetField( epstInList, CHDATE, 0, I_ChDate, &nLen );

    /*取域<27-渠道时间>的值*/
    UDO_GetField( epstInList, CHTIME, 0, I_ChTime, &nLen );

    /*取域<32-渠道处理码>的值*/
    UDO_GetField( epstInList, CHTXCODE, 0, I_ChTxCode, &nLen );

    /*取域<33-渠道流水>的值*/
    UDO_GetField( epstInList, CHSERIAL, 0, I_ChSerial, &nLen );

    /*取域<47-原渠道交易处理码>的值*/
    UDO_GetField( epstInList, OLDPROCESSCODE, 0, I_OldProcessCode, &nLen );

    /*取域<71-串码>的值*/
    UDO_GetField( epstInList, COUPONID, 0, I_couponid, &nLen );

    /*取域<78-原渠道流水号>的值*/
    UDO_GetField( epstInList, OLDCHSERIAL, 0, I_OldChSerial, &nLen );

    /*取域<79-商户订单号>的值*/    
	UDO_GetField( epstInList, OUTTRADENO, 0, I_outtradeno, &nLen );

    /*
     * TODO: 在此添加绘制代码
     */

	memset((char *)&stTerm, 0, sizeof(stTerm));	
	nRet = GetMitenoTermInfo( I_TermId, I_MerchantId, &stTerm, O_RetMsg );
	if( nRet != 0 )
	{
		strcpy( O_Response, "211011001" );
		goto ErrorOut;
	}
	if( stTerm.m_sStatus[0] != '0' )
	{
		strcpy( O_Response, "211011002" );
		strcpy( O_RetMsg, "该终端已经限制接入" );
		goto ErrorOut;
	}
	
	sprintf( aczCurPosTrace, "%06d", atoi( I_ChSerial ) + 1 );
	EXEC SQL UPDATE Svc_Miteno_Terminal set PosTrace= :aczCurPosTrace
			WHERE Code = :stTerm.m_sTermId AND	Merchant_Code=:stTerm.m_sMerchantId;
	if( SQLCODE )
	{
		strcpy( O_Response, "211011003" );
		strcpy( O_RetMsg, "更新终端当前流水出错" );
		LOG4C(( LOG_FATAL, "SQLCODE[%d][%s][%s]", SQLCODE, stTerm.m_sTermId, stTerm.m_sMerchantId ));
		EXEC SQL ROLLBACK WORK;
		goto ErrorOut;
	}
	EXEC SQL COMMIT WORK;
		
	memcpy(O_HoDate, I_TxDate, 8);
	memcpy(O_HoTime, I_TxTime, 6);
	
	sprintf(O_RefNum, "%6.6s%06d", I_TxTime, atol(I_Serial)% 999999 );

	LOG4C(( LOG_DEBUG, "I_OldProcessCode[%s]", I_OldProcessCode));

	if((memcmp(I_OldProcessCode, "100008", 6) == 0)||(memcmp(I_OldProcessCode, "100012", 6) == 0))
	{
		LOG4C(( LOG_DEBUG, "微信支付冲正"));

		/*微信支付冲正*/
		
		memset((char *)&stWxOrderReverSalreq, 0, sizeof(stWxOrderReverSalreq));
		memset((char *)&stWxOrderReverSalrsp, 0, sizeof(stWxOrderReverSalrsp));
		
		memcpy(stWxOrderReverSalreq.szBatchNo, I_BatchNo, 6);
		memcpy(stWxOrderReverSalreq.szMerchantID, I_MerchantId, 15);
		memcpy(stWxOrderReverSalreq.szOldTrace, I_OldChSerial, 6);
		strcpy(stWxOrderReverSalreq.szOutTradeNo, I_outtradeno);
		memcpy(stWxOrderReverSalreq.szRefNum, O_RefNum, 12);
		memcpy(stWxOrderReverSalreq.szTermID, I_TermId, 8);
		memcpy(stWxOrderReverSalreq.szTrace, I_ChSerial, 6);
		memcpy(stWxOrderReverSalreq.szTransCode, I_ProcessCode, 6);
		memcpy(stWxOrderReverSalreq.szDate, O_HoDate, 8);
		memcpy(stWxOrderReverSalreq.szTime, O_HoTime, 6);
		memcpy(stWxOrderReverSalreq.szAmount, I_TxAmt, 12);			
		nRet = doWxOrderReversal(&stWxOrderReverSalreq, &stWxOrderReverSalrsp);
		if(nRet != 0)
		{
		   strcpy( O_Response, "211011004" );
		   strcpy( O_RetMsg, "系统故障" );
		   goto ErrorOut;
		}
		if(stWxOrderReverSalrsp.nResp == 2)	/*找不到原交易*/
		{
			
			memcpy(O_HoDate, stWxOrderReverSalrsp.szHostDate, 8);
			memcpy(O_HoTime, stWxOrderReverSalrsp.szHostTime, 6);
			strcpy( O_Response, "211011005" );
			strcpy(O_RetMsg, "找不到原交易");
		}
		else if(stWxOrderReverSalrsp.nResp != 0)
		{
		  strcpy( O_Response, "211011006" );
		  strncpy(O_RetMsg, stWxOrderReverSalrsp.szRespInfo, 40);
		  
		  goto ErrorOut;
		}
	
		memcpy(O_HoDate, stWxOrderReverSalrsp.szHostDate, 8);
		memcpy(O_HoTime, stWxOrderReverSalrsp.szHostTime, 6);

	}
	else if(memcmp(I_OldProcessCode, "100021", 6) == 0)	/*百度*/
	{
		LOG4C(( LOG_DEBUG, "百度支付冲正"));

		/*百度支付冲正*/
		
		memset((char *)&stBaiduOrderReverSalreq, 0, sizeof(stBaiduOrderReverSalreq));
		memset((char *)&stBaiduOrderReverSalrsp, 0, sizeof(stBaiduOrderReverSalrsp));
		
		memcpy(stBaiduOrderReverSalreq.szBatchNo, I_BatchNo, 6);
		memcpy(stBaiduOrderReverSalreq.szMerchantID, I_MerchantId, 15);
		memcpy(stBaiduOrderReverSalreq.szOldTrace, I_OldChSerial, 6);
		strcpy(stBaiduOrderReverSalreq.szOutTradeNo, I_outtradeno);
		memcpy(stBaiduOrderReverSalreq.szRefNum, O_RefNum, 12);
		memcpy(stBaiduOrderReverSalreq.szTermID, I_TermId, 8);
		memcpy(stBaiduOrderReverSalreq.szTrace, I_ChSerial, 6);
		memcpy(stBaiduOrderReverSalreq.szTransCode, I_ProcessCode, 6);
		memcpy(stBaiduOrderReverSalreq.szDate, O_HoDate, 8);
		memcpy(stBaiduOrderReverSalreq.szTime, O_HoTime, 6);
		memcpy(stBaiduOrderReverSalreq.szAmount, I_TxAmt, 12);			
		nRet = doBaiduOrderReversal(&stBaiduOrderReverSalreq, &stBaiduOrderReverSalrsp);
		if(nRet != 0)
		{
		   strcpy( O_Response, "211011004" );
		   strcpy( O_RetMsg, "系统故障" );
		   goto ErrorOut;
		}
		if(stBaiduOrderReverSalrsp.nResp == 2)	/*找不到原交易*/
		{
			
			memcpy(O_HoDate, stBaiduOrderReverSalrsp.szHostDate, 8);
			memcpy(O_HoTime, stBaiduOrderReverSalrsp.szHostTime, 6);
			strcpy( O_Response, "211011005" );
			strcpy(O_RetMsg, "找不到原交易");
		}
		else if(stBaiduOrderReverSalrsp.nResp != 0)
		{
		  strcpy( O_Response, "211011006" );
		  strncpy(O_RetMsg, stBaiduOrderReverSalrsp.szRespInfo, 40);
		  
		  goto ErrorOut;
		}
	
		memcpy(O_HoDate, stBaiduOrderReverSalrsp.szHostDate, 8);
		memcpy(O_HoTime, stBaiduOrderReverSalrsp.szHostTime, 6);

	}
	else
	{
		
		LOG4C(( LOG_DEBUG, "开始冲正"));
		
		memset((char *)&req, 0, sizeof(req));
		memset((char *)&rsp, 0, sizeof(rsp));
		
		memcpy(req.szTransCode, I_ProcessCode, 6);
		memcpy(req.szMerchantID, I_MerchantId, 15);
		memcpy(req.szTermID, I_TermId, 8);
		memcpy(req.szDate, O_HoDate, 8);
		memcpy(req.szTime, O_HoTime, 6);
		memcpy(req.szTrace, I_ChSerial, 6);
		memcpy(req.szBatchNo, I_BatchNo, 6);
		memcpy(req.szRefNum, O_RefNum, 12);
		memcpy(req.szOldTransCode, I_OldProcessCode, 6);
		memcpy(req.szAmount, I_TxAmt, 12);
		strcpy(req.szCouponID, I_couponid);
		memcpy(req.szOldTrace, I_OldChSerial, 6);
			

		nRet = doReversal(&req, &rsp);
		if(nRet != 0)
		{
		   strcpy( O_Response, "211011004" );
		   strcpy( O_RetMsg, "系统故障" );
		   goto ErrorOut;
		}
		if(rsp.nResp == 2)	/*找不到原交易*/
		{
			
			memcpy(O_HoDate, rsp.szHostDate, 8);
			memcpy(O_HoTime, rsp.szHostTime, 6);
			strcpy( O_Response, "211011005" );
			strcpy(O_RetMsg, "找不到原交易");
		}
		else if(rsp.nResp != 0)
		{
		  strcpy( O_Response, "211011006" );
		  strncpy(O_RetMsg, rsp.szRespInfo, 40);
		  
		  goto ErrorOut;
		}
		memcpy(O_HoDate, rsp.szHostDate, 8);
		memcpy(O_HoTime, rsp.szHostTime, 6);
	}
	
	strcpy( O_Response, "000000000" );
	strcpy(O_RetMsg, "冲正成功");
ErrorOut:

    /*给域<2-响应代码>赋值*/
    UDO_AddField( opstOutList, RESPONSE, UDT_STRING, O_Response, strlen(O_Response) );

    /*给域<3-响应信息>赋值*/
    UDO_AddField( opstOutList, RETMSG, UDT_STRING, O_RetMsg, strlen(O_RetMsg) );

	/*给域<58-主机参考号>赋值*/    
	UDO_AddField( opstOutList, REFNUM, UDT_STRING, O_RefNum, strlen(O_RefNum) );
	
    /*给域<72-主机日期>赋值*/    
	UDO_AddField( opstOutList, HODATE, UDT_STRING, O_HoDate, strlen(O_HoDate) );    

	/*给域<73-主机时间>赋值*/    
	UDO_AddField( opstOutList, HOTIME, UDT_STRING, O_HoTime, strlen(O_HoTime) );

    return 0;
}
